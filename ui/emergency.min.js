var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {};

Bahmni.Common.Constants = {
    dateFormat: "dd/mm/yyyy",
    dateDisplayFormat: "dd-MMM-yyyy",
    emrapiDiagnosisUrl :"/openmrs/ws/rest/emrapi/diagnosis",
    emrapiConceptUrl :"/openmrs/ws/rest/emrapi/concept",
    encounterConfigurationUrl: "/openmrs/ws/rest/v1/bahmnicore/bahmniencounter/config",
    patientConfigurationUrl:"/openmrs/ws/rest/v1/bahmnicore/patient/config",
    encounterUrl: "/openmrs/ws/rest/emrapi/encounter",
    recentEncounterUrl: "/openmrs/ws/rest/emrapi/encounter/active",
    conceptUrl: "/openmrs/ws/rest/v1/concept",
    visitUrl: "/openmrs/ws/rest/v1/visit",
    endVisitUrl: "/openmrs/ws/rest/v1/bahmnicore/visit/endVisit",
    visitTypeUrl: "/openmrs/ws/rest/v1/visittype",
    visitSummaryUrl: "/openmrs/ws/rest/v1/bahmnicore/visitsummary",
    openmrsUrl: "/openmrs",
    idgenConfigurationURL: "/openmrs/ws/rest/v1/idgen/identifiersources",
    bahmniRESTBaseURL: "/openmrs/ws/rest/v1/bahmnicore",
    dosageFrequencyConceptName : 'Dosage Frequency',
    dosageInstructionConceptName : 'Dosage Instructions',
    consultationNoteConceptName : 'Consultation Note',
    radiologyOrderType : 'Radiology Order',
    radiologyResultConceptName :"Radiology Result",
    investigationEncounterType:"INVESTIGATION",
    labOrderNotesConcept: "Lab Order Notes",
    dispositionConcept : "Disposition",
    dispositionGroupConcept : "Disposition Set",
    dispositionNoteConcept : "Disposition Note",
    ruledOutDiagnosisConceptName : 'Ruled Out Diagnosis',
    ruledOutCertainty : 'RULED OUT',
    emrapiConceptMappingSource :"org.openmrs.module.emrapi",
    includeAllObservations: false,
    openmrsObsUrl :"/openmrs/ws/rest/v1/obs",
    openmrsObsRepresentation :"custom:(uuid,obsDatetime,value:(uuid,name:(uuid,name)))"
};

Bahmni.Common.Util = Bahmni.Common.Util || {}

angular.module('bahmni.common.util', []);

Bahmni.Common.Util.ObjectUtil = {
	slice: function(obj, propertyNames) {
		var newObj = {};
		angular.forEach(propertyNames, function(propertyName){
			newObj[propertyName] = obj[propertyName];
		});
		return newObj;
	}
}
'use strict';
Bahmni.Common.Util.ArrayUtil = {
    chunk: function(array, chunkSize) {
        var chunks = [];
        for (var i = 0; i < array.length; i += chunkSize) chunks.push(array.slice(i, i + chunkSize));
        return chunks;
    },

    removeItem: function(array, item) {
    	var index = array.indexOf(item);
    	if(index !== -1) {
    		array.splice(index, 1)
    	}
    }
};
'use strict';

angular.module('httpErrorInterceptor',[])
    .config(function($httpProvider) {
        var interceptor = ['$rootScope', '$q', '$window', function($rootScope, $q, $window) {
            var showError = function(errorMessage){
                $rootScope.server_error = errorMessage;
                $window.scrollTo(0, 0);
            };

            function stringAfter(value, searchString) {
                var indexOfFirstColon = value.indexOf(searchString);
                return value.substr(indexOfFirstColon + 1).trim()
            }

            function success(response) {
                $rootScope.server_error = null;
                return response;
            }

            function error(response) {
                var data = response.data;
                var unexpecetedError = "There was an unexpected issue on the server. Please try again";
                if (response.status === 500) {
                    var errorMessage = data.error && data.error.message ? stringAfter(data.error.message, ':') : unexpecetedError;
                    showError(errorMessage);
                } else if (response.status === 409){
                    var errorMessage = data.error && data.error.message ? stringAfter(data.error.message, ':') : "Duplicate entry error";
                    showError(errorMessage);
                } else if(response.status === 0){
                    showError("Could not connect to the server. Please check your connection and try again");
                } else if(response.status === 405){
                    showError(unexpecetedError);
                } else if(response.status === 400){
                    if($rootScope.server_error === null){
                        showError("Could not connect to the server. Please check your connection and try again");
                    }
                } else if (response.status === 403) {
                    var errorMessage = data.error && data.error.message ? stringAfter(data.error.message, ':') : unexpecetedError;
                    showError(errorMessage);
                } else if (response.status === 404) {
                    showError("The requested information does not exist");
                }
                return $q.reject(response);
            }

            return function(promise) {
                return promise.then(success, error);
            }

        }];
        $httpProvider.responseInterceptors.push(interceptor);
    }).run(['$rootScope', '$location', function ($rootScope, $location) {
        $rootScope.$watch(function(){
            return $location.path();
        }, function () {
            $rootScope.server_error = null;
        })
    }]);
angular.module('bahmni.common.uiHelper', [])

'use strict';

angular.module('bahmni.common.uiHelper')
    .factory('spinner', ['$q', function ($q) {
        var arrayUtil = Bahmni.Common.Util.ArrayUtil
        var tokens = [];



        var show = function (token) {
           tokens.push(token);
           if($('#overlay').length == 0) {
                $('body').prepend('<div id="overlay"><div></div></div>');
           }
           $('#view-content').hide();
           $('#overlay').show();
        }

        var hide = function (token) {
            arrayUtil.removeItem(tokens, token);
            if(tokens.length === 0) {
                $('#overlay').fadeOut();
                $('#view-content').show();
            }
        }

        var forPromise = function (promise, options) {
            options = options || {}
            var token = Math.random();
            show(token);
            return promise.then(function (response) {
                if(!options.doNotHideOnSuccess) {
                    hide(token);
                }
                return response;
            }, function (response) {
                hide(token);
                return $q.reject(response);
            });
        };

        return {
            forPromise: forPromise
        }
    }]);
'use strict';

angular.module('authentication', ['ngCookies'])
    .config(function ($httpProvider) {
        var interceptor = ['$rootScope', '$q', function ($rootScope, $q) {
            function success(response) {
                return response;
            }

            function error(response) {
                if (response.status === 401) {
                    $rootScope.$broadcast('event:auth-loginRequired');
                }
                return $q.reject(response);
            }

            return function (promise) {
                return promise.then(success, error);
            }

        }];
        $httpProvider.responseInterceptors.push(interceptor);
    }).run(['$rootScope', '$window', function ($rootScope, $window) {
        $rootScope.$on('event:auth-loginRequired', function () {
            $window.location = "/home/#/login?showLoginMessage=true";
        });
    }]).service('sessionService', ['$rootScope', '$http', '$q', '$cookieStore', function ($rootScope, $http, $q, $cookieStore) {
        var sessionResourcePath = '/openmrs/ws/rest/v1/session';

        var createSession = function(username, password){
            return $http.get(sessionResourcePath, {
                headers: {'Authorization': 'Basic ' + window.btoa(username + ':' + password)},
                cache: false
            });
        };

        this.destroy = function(){
            return $http.delete(sessionResourcePath).success(function(data){
                $rootScope.currentUser = null;
            });
        };

        this.loginUser = function(username, password) {
            var deferrable = $q.defer();
            createSession(username,password).success(function(data) {
                if (data.authenticated) {
                    $cookieStore.put('bahmni.user', username, {path: '/', expires: 7});
                    deferrable.resolve();
                } else {
                   deferrable.reject('Authentication failed. Please try again.');   
                }
            }).error(function(){
                deferrable.reject('Authentication failed. Please try again.');   
            });
            return deferrable.promise;
        };

        this.get = function () {
            return $http.get(sessionResourcePath, { cache: false });
        };

        this.loadCredentials = function () {
            var deferrable = $q.defer();
            var currentUser = $cookieStore.get('bahmni.user');
            $http.get("/openmrs/ws/rest/v1/user", {
                method: "GET",
                params: {
                    username: currentUser,
                    v: "custom:(username,uuid,privileges:(name,retired))"
                },
                cache: false
            }).success(function(data) {
                $rootScope.currentUser = data.results[0];
                $rootScope.$broadcast('event:user-credentialsLoaded', data.results[0]);
                deferrable.resolve(data.results[0]);
            }).error(function () {
                deferrable.reject('Could not get roles for the current user.');
            });
            return deferrable.promise;
        };

        this.loadProviders = function(userInfo) {
            return $http.get("/openmrs/ws/rest/v1/provider", {
                 method: "GET",
                 params: {
                     user: userInfo.uuid
                 },
                 cache: false
             }).success(function (data) {
                var providerUuid = (data.results.length > 0) ? data.results[0].uuid : undefined;
                $rootScope.currentProvider = { uuid: providerUuid };
             });
        };
    }]).factory('authenticator', ['$rootScope', '$q', '$window', 'sessionService', function ($rootScope, $q, $window, sessionService) {
        var authenticateUser = function () {
            var defer = $q.defer();
            sessionService.get().success(function (data) {
                if (data.authenticated) {
                    defer.resolve();
                } else {
                    defer.reject('User not authenticated');
                    $rootScope.$broadcast('event:auth-loginRequired');
                }
            });
            return defer.promise;
        }

        return {
            authenticateUser: authenticateUser
        }

    }]).directive('logOut',['sessionService', '$window', function(sessionService, $window) {
        return {
            link: function(scope, element, attrs) {
                element.bind('click', function() {
                    scope.$apply(function() {
                        sessionService.destroy().then(
                            function () {
                                $window.location = "/home/#/login";
                            }
                        );
                    });
                });
            }
        };
    }])
    .directive('btnUserInfo', ['$rootScope', '$window', function($rootScope, $window) {
        return {
            restrict: 'CA',
            link: function(scope, elem, attrs) {
                elem.bind('click', function(event) {
                    $(this).next().toggleClass('active');
                    event.stopPropagation();
                });
                $(document).find('body').bind('click', function() {
                    $(elem).next().removeClass('active');
                });
            }
        };
    }
]);
angular.module('bahmni.common.appFramework', ['authentication']);

var Bahmni = Bahmni || {};
Bahmni.Common = Bahmni.Common || {}; 
Bahmni.Common.AppFramework = Bahmni.Common.AppFramework || {}; 
Bahmni.Common.AppFramework.AppDescriptor = function (context, inheritContext, retrieveUserCallback) {
    this.id = null;
    this.instanceOf = null;
    this.description = null;
    this.contextModel = null;

    this.extensionPoints = [];
    this.extensions = [];
    this.configs = [];

    this.extensionPath = context;
    this.contextPath = inheritContext ? context.split("/")[0] : context;

    var that = this;

    this.setExtensions = function(extensions) {
        extensions.forEach(function(extn) {
            var existing = that.extensionPoints.filter(function(ep) {
                return ep.id == extn.extensionPointId;
            });

            if (existing.length == 0) {
                that.extensionPoints.push({
                    id: extn.extensionPointId,
                    description: extn.description
                });
            }
        });
        that.extensions = extensions;
    };

    this.setTemplate = function(template) {
        that.instanceOf = template.id;
        that.description = that.description || template.description;
        that.contextModel = that.contextModel || template.contextModel;
        if (template.configOptions) {
            template.configOptions.forEach(function(opt) {
                var existing = that.configs.filter(function(cfg) {
                    return cfg.name == opt.name;
                });
                if (existing.length > 0) {
                    existing[0].description = opt.description;
                } else {
                    that.configs.push({
                        name: opt.name,
                        description: opt.description,
                        value: opt.defaultValue
                    });
                }
            });
        }
    };

    this.setDefinition = function(instance) {
        that.instanceOf = instance.instanceOf;
        that.id = instance.id;
        that.description = instance.description;
        that.contextModel = instance.contextModel;
        if (instance.extensionPoints) {
            instance.extensionPoints.forEach(function(iep) {
                var existing = that.extensionPoints.filter(function(ep) {
                    return ep.id == iep.id;
                });
                if (existing.length === 0) {
                    that.extensionPoints.push(iep);
                }
            });
        }

        if (instance.config) {
            for (var configName in instance.config) {
                var existingConfig = that.getConfig(configName);
                if (existingConfig) {
                    existingConfig.value = instance.config[configName];
                } else {
                    that.configs.push({ name: configName, value: instance.config[configName] });
                }
            }
        }
    };

    this.getExtensions = function (extPointId, type) {
        var currentUser = retrieveUserCallback();
        if (currentUser && that.extensions) {
            var extnType = type || 'all';
            var userPrivileges = currentUser.privileges.map(function (priv) {
                return priv.retired ? "" : priv.name;
            });
            var appsExtns = that.extensions.filter(function (extn) {
                return ((extnType==='all') || (extn.type===extnType)) && (extn.extensionPointId === extPointId) && (!extn.requiredPrivilege || (userPrivileges.indexOf(extn.requiredPrivilege) >= 0));
            });
            appsExtns.sort(function(extn1, extn2) {
                return extn1.order - extn2.order;
            });
            return appsExtns;
        }
    };

    this.getConfig = function(configName) {
        var cfgList = that.configs.filter(function(cfg) {
            return cfg.name == configName;
        });
        return (cfgList.length > 0) ? cfgList[0] : null;
    };

    this.getConfigValue = function(configName) {
        var config = this.getConfig(configName);
        return config ? config.value : null;
    }

    this.formatUrl =  function (url, options, useQueryParams) {
        var pattern = /{{([^}]*)}}/g,
            matches = url.match(pattern),
            replacedString = url,
            checkQueryParams = useQueryParams || false,
            queryParameters = this.parseQueryParams();
        if (matches) {
            matches.forEach(function(el) {
                var key = el.replace("{{",'').replace("}}",'');
                var value = options[key];
                if (!value && (checkQueryParams===true)) {
                    value = queryParameters[key] || null;
                }
                replacedString = replacedString.replace(el, value);
            });
        }
        return replacedString.trim();
    };

    this.parseQueryParams = function(locationSearchString) {
        var urlParams;
        var match,
            pl     = /\+/g,  // Regex for replacing addition symbol with a space
            search = /([^&=]+)=?([^&]*)/g,
            decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
            queryString  = locationSearchString || window.location.search.substring(1);

        urlParams = {};
        while (match = search.exec(queryString)) {
           urlParams[decode(match[1])] = decode(match[2]);
        }
        return urlParams;
    };
}

'use strict';

angular.module('bahmni.common.appFramework')
    .service('appService', ['$http', '$q', 'sessionService','$rootScope', function ($http, $q, sessionService, $rootScope) {
        var currentUser = null;
        var currentProvider = null;
        var baseUrl = "/bahmni_config/openmrs/apps/";
        var appDescriptor = null;


        var loadConfig = function(url) {
            return $http.get(url, {withCredentials: true});
        };

        var loadTemplate = function(appDescriptor) {
            var deferrable = $q.defer();
            loadConfig(baseUrl + appDescriptor.contextPath + "/appTemplate.json").then(
                function(result) {
                    if (result.data.length > 0) {
                        appDescriptor.setTemplate(result.data[0]);
                    }
                    deferrable.resolve(appDescriptor);
                },
                function(error) {
                    if (error.status != 404) {
                        deferrable.reject(error);
                    } else {
                        deferrable.resolve(appDescriptor);
                    }
                }
            );
            return deferrable.promise;
        };

        var loadDefinition = function(appDescriptor) {
            var deferrable = $q.defer();
            loadConfig(baseUrl + appDescriptor.contextPath + "/app.json").then(
                function(result) {
                    if (result.data.length > 0) {
                        appDescriptor.setDefinition(result.data[0]);
                    }
                    deferrable.resolve(appDescriptor);
                },
                function(error) {
                    if (error.status != 404) {
                        deferrable.reject(error);
                    } else {
                        deferrable.resolve(appDescriptor);
                    }
                }
            );
            return deferrable.promise;
        };

        var loadExtensions = function(appDescriptor) {
            var deferrable = $q.defer();
            loadConfig(baseUrl + appDescriptor.extensionPath + "/extension.json").then(
                function(result) {
                    appDescriptor.setExtensions(result.data);
                    deferrable.resolve(appDescriptor);
                },
                function(error) {
                    if (error.status != 404) {
                        deferrable.reject(error);
                    } else {
                        deferrable.resolve(appDescriptor);
                    }
                }
            );
            return deferrable.promise;
        };

        this.getAppDescriptor = function() {
            return appDescriptor;
        };

        this.initApp = function(appName, options) {
            var appLoader = $q.defer();
            var promises = [];
            var opts = options || {'app': true, 'extension' : true};

            var inheritAppContext = (opts.inherit == undefined) ? true : opts.inherit;

            appDescriptor = new Bahmni.Common.AppFramework.AppDescriptor(appName, inheritAppContext, function() {
                return currentUser;
            });

            var loadCredentialsPromise = sessionService.loadCredentials();
            var loadProviderPromise = loadCredentialsPromise.then(sessionService.loadProviders);
            
            promises.push(loadCredentialsPromise);
            promises.push(loadProviderPromise);
            if (opts.extension) {
                promises.push(loadExtensions(appDescriptor));
            }
            if (opts.template) {
                promises.push(loadTemplate(appDescriptor));
            }
            if (opts.app) {
                promises.push(loadDefinition(appDescriptor));
            }
            $q.all(promises).then(function (results) {
                currentUser = results[0];
                appLoader.resolve(appDescriptor);
                $rootScope.$broadcast('event:appExtensions-loaded');
            }, function(errors){
                appLoader.reject(errors);
            });
            return appLoader.promise;
        };
    }]);
angular.module('bahmni.common.domain', []);
'use strict';

angular.module('bahmni.common.domain')
    .factory('configurationService', ['$http', '$q', function ($http, $q) {
      
        var configurationFunctions = {};
        
        configurationFunctions.encounterConfig = function () {
            return $http.get(Bahmni.Common.Constants.encounterConfigurationUrl, {
                params: {"callerContext": "REGISTRATION_CONCEPTS"},
                withCredentials: true
            });
        };

        configurationFunctions.patientConfig = function () {
            var patientConfig =  $http.get(Bahmni.Common.Constants.patientConfigurationUrl, {
                withCredentials: true
            });
            return patientConfig;
        };

        configurationFunctions.patientAttributesConfig = function () {
            return $http.get(Bahmni.Common.Constants.openmrsUrl + "/ws/rest/v1/personattributetype?v=full", {
                withCredentials: true
            });
        };

        configurationFunctions.dosageFrequencyConfig = function () {
            var dosageFrequencyConfig =  $http.get(Bahmni.Common.Constants.conceptUrl, {
                method:"GET",
                params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.dosageFrequencyConceptName },
                withCredentials: true
            });
            return dosageFrequencyConfig;
        };

        configurationFunctions.dosageInstructionConfig = function () {
            var dosageInstructionConfig =  $http.get(Bahmni.Common.Constants.conceptUrl, {
                method:"GET",
                params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.dosageInstructionConceptName },
                withCredentials: true
            });
            return dosageInstructionConfig;
        };

        configurationFunctions.consultationNoteConfig = function () {
            var consultationNoteConfig =  $http.get(Bahmni.Common.Constants.conceptUrl, {
                method:"GET",
                params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.consultationNoteConceptName },
                withCredentials: true
            });
            return consultationNoteConfig;
        };

        configurationFunctions.ruledOutDiagnosisConfig = function () {
            var ruledOutDiagnosisConfig =  $http.get(Bahmni.Common.Constants.conceptUrl, {
                method:"GET",
                params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.ruledOutDiagnosisConceptName },
                withCredentials: true
            });
            return ruledOutDiagnosisConfig;
        };

        configurationFunctions.radiologyObservationConfig = function(){
            var radiologyObservationConfig =  $http.get(Bahmni.Common.Constants.conceptUrl, {
                method:"GET",
                params: { v: 'custom:(uuid,name)', name: Bahmni.Common.Constants.radiologyResultConceptName },
                withCredentials: true
            });
            return radiologyObservationConfig;
        }

        configurationFunctions.labOrderNotesConfig = function(){
            var labOrderNotesConfig =  $http.get(Bahmni.Common.Constants.conceptUrl, {
                method:"GET",
                params: { v: 'custom:(uuid,name)', name: Bahmni.Common.Constants.labOrderNotesConcept },
                withCredentials: true
            });
            return labOrderNotesConfig;
        }

        configurationFunctions.addressLevels = function () {
            return $http.get(constants.openmrsUrl + "/module/addresshierarchy/ajax/getOrderedAddressHierarchyLevels.form", {
                withCredentials: true
            });
        };

        configurationFunctions.identifierSourceConfig = function () {
           return $http.get(Bahmni.Common.Constants.idgenConfigurationURL, {
                withCredentials: true
            });
        };

        var getConfigurations = function(configurationNames) {
            var configurations = {};
            var configurationsPromiseDefer = $q.defer();
            var promises = [];

            configurationNames.forEach(function(configurationName){
              promises.push(configurationFunctions[configurationName]().success(function (data) {
                  configurations[configurationName] = data;
                })
              );
            });

            $q.all(promises).then(function () {
                configurationsPromiseDefer.resolve(configurations);
            });

            return configurationsPromiseDefer.promise;
        };

        return {
            getConfigurations: getConfigurations
        };
}]);
angular.module('bahmni.registration', ['bahmni.common.domain', 'bahmni.common.util', 'bahmni.common.uiHelper', 'infinite-scroll', 'ngRoute']);
var defaults = {
    registration_fees_newPatient : 10,
    registration_fees_oldPatient : 0,
    maxAutocompleteResults : 20,

    registration_fees: function(isNew) {
        return isNew? this.registration_fees_newPatient: this.registration_fees_oldPatient;
    }
}

var Bahmni = Bahmni || {};
Bahmni.Registration = Bahmni.Registration || {};

var constants = {
    patientIdentifierTypeName: "Bahmni Id",
    encounterType: {
        registration: "REG"
    },
    // should be picking this up from global properties.
    visitType: {
        registration: "REG",
        returningPatient: "REVISIT",
        emergency: "EMERGENCY"
    },
    openmrsUrl: "/openmrs",
    baseOpenMRSRESTURL: "/openmrs/ws/rest/v1",
    bahmniRESTBaseURL: "/openmrs/ws/rest/v1/bahmnicore",
    emrApiRESTBaseURL: "/openmrs/ws/rest/emrapi",
    emrApiEncounterUrl: "/openmrs/ws/rest/emrapi/encounter",
    webServiceRestBaseURL: "/openmrs/ws/rest/v1",
    registrationFeesConcept: "REGISTRATION FEES",
    defaultVisitTypeName: "REG", //TODO: Read this from config
    allAddressFileds: ["uuid", "preferred", "address1", "address2", "address3", "address4", "address5", "address6", "cityVillage", "countyDistrict", "stateProvince", "postalCode", "country", "latitude", "longitude"]
};


'use strict';

angular.module('bahmni.registration').factory('initialization',
    ['$rootScope', '$q', 'configurationService', 'authenticator', 'appService', 'spinner', 'Preferences',
    function ($rootScope, $q, configurationService, authenticator, appService, spinner, preferences) {
        var getConfigs = function() {
            var configNames = ['encounterConfig', 'patientAttributesConfig', 'identifierSourceConfig', 'addressLevels'];
            return configurationService.getConfigurations(configNames).then(function (configurations) {
                var patientConfig = new PatientConfig();
                var patientAttributeTypes = new PatientAttributeTypeMapper().mapFromOpenmrsPatientAttributeTypes(configurations.patientAttributesConfig.results);

                $rootScope.encounterConfiguration = angular.extend(new RegistrationEncounterConfig(), configurations.encounterConfig);
                $rootScope.patientConfiguration = angular.extend(patientConfig, patientAttributeTypes);
                $rootScope.patientConfiguration = angular.extend(patientConfig, {identifierSources: configurations.identifierSourceConfig});            
                $rootScope.addressLevels = configurations.addressLevels;
            });
        };

        var initApp = function() {
            return appService.initApp('registration', {'app': true, 'extension' : true });
        };

        var getIdentifierPrefix = function() {
            preferences.identifierPrefix = appService.getAppDescriptor().getConfigValue("defaultIdentifierPrefix");
        }

        return spinner.forPromise(authenticator.authenticateUser().then(initApp).then(getConfigs).then(getIdentifierPrefix));
    }]
);
'use strict';

angular.module('bahmni.registration')
    .factory('patientAttributeService', ['$http', function ($http) {

    var urlMap;

    var init = function(){
        urlMap = {
            "personName" : "/ws/rest/v1/bahmnicore/unique/personname",
            "personAttribute" : "/ws/rest/v1/bahmnicore/unique/personattribute"
        }
    };
    init();

    var search = function(fieldName, query, type){
        var url = constants.openmrsUrl + urlMap[type];
        var queryWithoutTrailingSpaces = query.trimLeft();

        return $http.get(url, {
            method: "GET",
            params: {q: queryWithoutTrailingSpaces, key: fieldName },
            withCredentials: true
        });
    };

    return{
        search : search
    };
}]);

'use strict';

angular.module('bahmni.registration')
    .factory('patientService', ['$http', '$rootScope', 'patient', function ($http, $rootScope) {
        var patient;

        var getPatient = function () {
            if (patient != undefined) {
                patient.image = constants.baseOpenMRSRESTURL + "/personimage/" + patient.uuid + ".jpeg" + "?q=" + new Date().getTime();
                return patient;
            }
            return {};
        };

        var rememberPatient = function (patientObj) {
            patient = patientObj;
        };

        var clearPatient = function () {
            patient = null;
        };

        var search = function (query, village, offset) {
            offset = offset || 0;
            return $http.get(constants.openmrsUrl + "/ws/rest/v1/patient", {
                method: "GET",
                params: {q: query, s: "byIdOrNameOrVillage", 'city_village': village, startIndex: offset},
                withCredentials: true
            });
        };

        var get = function (uuid) {
            return $http.get(constants.openmrsUrl + "/ws/rest/v1/patient/" + uuid, {
                method: "GET",
                params: {v: "full"},
                withCredentials: true
            });
        };

        var generateIdentifier = function (patient) {
            var idgenJson = {"identifierSourceName": patient.identifierPrefix.prefix};
            return $http.post(constants.openmrsUrl + "/ws/rest/v1/idgen", idgenJson);
        };

        var create = function (patient) {
            var patientJson = new CreatePatientRequestMapper(moment()).mapFromPatient($rootScope.patientConfiguration.personAttributeTypes, patient);
            return $http.post(constants.baseOpenMRSRESTURL + "/patientprofile", patientJson, {
                withCredentials: true,
                headers: {"Accept": "application/json", "Content-Type": "application/json"}
            });
        };

        var update = function (patient, openMRSPatient) {
            var patientJson = new UpdatePatientRequestMapper(moment()).mapFromPatient($rootScope.patientConfiguration.personAttributeTypes, openMRSPatient, patient);
            return $http.post(constants.baseOpenMRSRESTURL + "/patientprofile/" + openMRSPatient.uuid, patientJson, {
                withCredentials: true,
                headers: {"Accept": "application/json", "Content-Type": "application/json"}
            });
        };

        var updateImage = function (uuid, image) {
            var updateImageUrl = constants.baseOpenMRSRESTURL + "/personimage/";
            var imageRequest = {
                "person": {
                    "uuid": uuid
                },
                "base64EncodedImage": image
            };
            return $http.post(updateImageUrl, imageRequest, {
                withCredentials: true,
                headers: {"Accept": "application/json", "Content-Type": "application/json"}
            });
        };

        return {
            search: search,
            create: create,
            generateIdentifier: generateIdentifier,
            getPatient: getPatient,
            rememberPatient: rememberPatient,
            clearPatient: clearPatient,
            update: update,
            get: get,
            updateImage: updateImage
        };
    }]);

'use strict';

angular.module('bahmni.registration')
    .factory('encounterService', ['$http', '$rootScope', function ($http, $rootScope) {
    
    var create = function (encounter) {

        encounter.providers = encounter.providers || [];
        if ($rootScope.currentProvider && $rootScope.currentProvider.uuid) {
            encounter.providers.push( { "uuid" : $rootScope.currentProvider.uuid } );
        }

        return $http.post(constants.emrApiRESTBaseURL + '/encounter', encounter, {
            withCredentials: true
        });
    };

    var getActiveEncounter =  function (patientUuid, visitTypeUuid, encounterTypeUuid) {
        var url = constants.emrApiRESTBaseURL + "/encounter/active";
        return $http.get(url, {
            params: {"patientUuid": patientUuid, "visitTypeUuid" : visitTypeUuid, "encounterTypeUuid" : encounterTypeUuid, "includeAll" : false},
            withCredentials: true
        });
    }

    return {
        create: create,
        getActiveEncounter : getActiveEncounter
    };
}]);
'use strict';

angular.module('bahmni.registration')
    .factory('age', [function () {
        var dateUtil = Bahmni.Common.Util.DateUtil;

        var fromBirthDate = function(birthDate) {
            var today = dateUtil.now();
            var period = dateUtil.diffInYearsMonthsDays(birthDate, today)
            return create(period.years, period.months, period.days);
        }

        var create = function(years, months, days) {
            var isEmpty = function() {
                return !(this.years || this.months || this.days);
            }


        	return {
                years: years,
                months: months,
                days: days,
                isEmpty: isEmpty
            };
        }

        return {
            fromBirthDate: fromBirthDate,
            create: create
        }
    }]
 );
'use strict';

angular.module('bahmni.registration')
    .factory('patient', ['age', function (age) {
        var create = function () {
            var calculateAge = function () {
                if (this.birthdate) {
                    var birthDate = new Date(this.birthdate.replace(/(\d{2})-(\d{2})-(\d{4})/, "$2/$1/$3"));
                    this.age = age.fromBirthDate(birthDate);
                }
                else {
                    this.age = { years: null };
                }
            };

            var generateIdentifier = function () {
                if (this.registrationNumber && this.registrationNumber.length > 0) {
                    this.identifier = this.identifierPrefix.name + this.registrationNumber;
                }
                return this.identifier
            };

            var clearRegistrationNumber = function () {
                this.registrationNumber = null;
                this.identifier = null;
            };

            var fullNameLocal = function () {
                var givenNameLocal = this.givenNameLocal || "";
                var familyNameLocal = this.familyNameLocal || "";
                return (givenNameLocal.trim() + " " + familyNameLocal.trim()).trim();
            };

            var getImageData = function () {
                return this.image && this.image.indexOf('data') === 0 ? this.image.replace("data:image/jpeg;base64,", "") : null;
            };

            return {
                address: {},
                age: age.create(),
                calculateAge: calculateAge,
                identifierPrefix: {},
                generateIdentifier: generateIdentifier,
                clearRegistrationNumber: clearRegistrationNumber,
                image: '../images/blank-user.gif',
                fullNameLocal: fullNameLocal,
                getImageData: getImageData
            };
        };

        return {
            create: create
        }
    }]);

'use strict';

angular.module('bahmni.registration')
    .factory('Preferences', ['$http', '$rootScope', function() {
      return {
          hasOldIdentifier: false
      };
}]);
var RegistrationEncounterConfig = (function() {
  function RegistrationEncounterConfig(conceptData, encounterTypes, visitTypes) {
    this.conceptData = conceptData;
    this.encounterTypes = encounterTypes;
    this.visitTypes = visitTypes;
  }

  RegistrationEncounterConfig.prototype = {
    visitTypeId: function(isNewPatient) {
      if (isNewPatient) {
        return this.visitTypes[constants.visitType.registration];
      } else {
        return this.visitTypes[constants.visitType.returningPatient];
      }
    },

    getVistTypesAsArray: function() {
      var visitTypesArray = [];
      for(var name in this.visitTypes) {
          visitTypesArray.push({name: name, uuid: this.visitTypes[name]});
      }
      return visitTypesArray;
    },

    getConceptUUID: function(conceptName) {
      var concept = this.conceptData[conceptName];
      return  concept !== undefined ?  concept.uuid : null;
    }
  }

  return RegistrationEncounterConfig;
})();
var PatientConfig = (function () {
    var autocompleteConfig = {
        map: {
            'caste': {
                'src': 'getAutoCompleteList',
                'responseMap': 'getDataResults'
            }
        },

        configure: function(attributes) {
            var self = this;
            attributes.forEach(function(attr) {
                if(self.map[attr.name] != null) {
                    attr.autocompleteConfig = self.map[attr.name];
                }
            });
        }
    }

    function PatientConfig(personAttributeTypes) {
        this.personAttributeTypes = personAttributeTypes;
    }

    PatientConfig.prototype = {
        get: function (attributeUuid) {
            return this.personAttributeTypes.filter(function (item) {
                return item.uuid === attributeUuid
            })[0];
        },

        customAttributeRows: function () {
            //Avoiding multiple calls from angular code. Side effect of the way angular does dirty check. [Shruti/ Sush]
            if (this.attributeRows === undefined) {
                var attributes = this.personAttributeTypes.filter(function (item) {
                    return item.name != "healthCenter" && item.name != "givenNameLocal" && item.name != "familyNameLocal";
                });

                autocompleteConfig.configure(attributes);
                this.attributeRows = this.splitAsRows(attributes);
            }
            return this.attributeRows;

        },

        splitAsRows: function (attributes) {
            var attributeRows = [];
            var row = [];
            for (var i in attributes) {
                row.push(attributes[i]);
                if (i != 0 && (i % 2) != 0) {
                    attributeRows.push(row);
                    row = [];
                }
            }
            if(row.length > 0) {
                attributeRows.push(row);
            }

            return attributeRows;
        },

        heathCentreAttribute: function () {
            return this.personAttributeTypes.filter(function (item) {
                return item.name == "healthCenter";
            })[0];
        },

        local: function () {
            var givenName = this.personAttributeTypes.filter(function (item) {
                return item.name == "givenNameLocal";
            })[0];
            var familyName = this.personAttributeTypes.filter(function (item) {
                return item.name == "familyNameLocal";
            })[0];

            if (givenName && familyName)
                return { "showNameField": true, "labelForNameField": givenName.description, "placeholderForGivenName": givenName.description, "placeholderForFamilyName": familyName.description};
            return {"showNameField": false}
        }

    };
    return PatientConfig;

})();

'use strict';

var CreatePatientRequestMapper = (function () {
    function CreatePatientRequestMapper(currentDate) {
        this.currentDate = currentDate;
    }

    CreatePatientRequestMapper.prototype.mapFromPatient = function (patientAttributeTypes, patient) {
        var openMRSPatient = {
            patient: {
                person: {
                    names: [
                        {
                            givenName: patient.givenName,
                            familyName: patient.familyName,
                            "preferred": false
                        }
                    ],
                    addresses: [Bahmni.Common.Util.ObjectUtil.slice(patient.address, constants.allAddressFileds) ],
                    birthdate: this.getBirthdate(patient.birthdate, patient.age),
                    birthdateEstimated: patient.birthdate === undefined,
                    gender: patient.gender,
                    personDateCreated: patient.registrationDate,
                    attributes: this.getMrsAttributes(patient, patientAttributeTypes)
                },
                identifiers: [
                    {
                        identifier: patient.identifier,
                        "identifierType": {
                           "name": constants.patientIdentifierTypeName
                        },
                        "preferred": true,
                        "voided": false
                    }
                ]

            }
        };

        this.setImage(patient, openMRSPatient);
        return  openMRSPatient;
    };

    CreatePatientRequestMapper.prototype.setImage = function (patient, openMRSPatient) {
        if (patient.getImageData()) {
            openMRSPatient.image = patient.getImageData()
        }
    };

    CreatePatientRequestMapper.prototype.getMrsAttributes = function (patient, patientAttributeTypes) {
        return patientAttributeTypes.map(function (result) {
            var attribute = {
                attributeType: { 
                    uuid: result.uuid
                }
            };
            setAttributeValue(result, attribute, patient[result.name]);
            return  attribute
        })
    };

    var setAttributeValue = function (attributeType, attr, value) {
        if (attributeType.format === "org.openmrs.Concept") {
            attr.hydratedObject = value;
        } else {
            attr.value = value;
        }
    };

    CreatePatientRequestMapper.prototype.getBirthdate = function (birthdate, age) {
        var mnt;
        if (birthdate !== undefined) {
            mnt = moment(birthdate, 'DD-MM-YYYY');
        } else if (age !== undefined) {
            mnt = moment(this.currentDate).subtract('years', age.years).subtract('months', age.months).subtract('days', age.days);
        }
        return mnt.format('YYYY-MM-DD');
    };

    return CreatePatientRequestMapper;
})();
'use strict';
var PatientMapper = (function () {
    function PatientMapper() {
    }

    PatientMapper.prototype.map = function (patientConfig, patient) {
        return {
            names: [
                {familyName: patient.familyName, givenName: patient.givenName}
            ],
            age: patient.age,
            birthdate: patient.birthdate,
            gender: patient.gender,
            identifier: patient.identifier,
            centerID: patient.identifierPrefix.name,
            addresses: [patient.address],
            image: patient.getImageData(),
            attributes: this._mapAttributes(patient, patientConfig)
        };
    };

    PatientMapper.prototype._mapAttributes = function (patient, patientConfig) {
        var patientAttributes = patientConfig.personAttributeTypes;
        return patientAttributes.map(function (result) {
            return {"attributeType": result.uuid, "name": result.name, "value": patient[result.name]}
        }).filter(function (result) {
            return result.value != undefined
        });
    };

    return PatientMapper;
})();
'use strict';

var PatientAttributeTypeMapper = (function () {

    function PatientAttributeTypeMapper() {
    }

    PatientAttributeTypeMapper.prototype.mapFromOpenmrsPatientAttributeTypes = function (mrspatientAttributeTypes) {
        var patientAttributeTypes = [];
        angular.forEach(mrspatientAttributeTypes, function(mrsAttributeType) {
            var attributeType = {
                uuid: mrsAttributeType.uuid,
                sortWeight: mrsAttributeType.sortWeight,
                name: mrsAttributeType.name,
                description: mrsAttributeType.description,
                format: mrsAttributeType.format,
                answers: []
            };
            if (mrsAttributeType.concept && mrsAttributeType.concept.answers) {
                angular.forEach(mrsAttributeType.concept.answers, function(mrsAnswer) {
                    attributeType.answers.push({
                        description: mrsAnswer.display,
                        conceptId: mrsAnswer.uuid
                    });
                });
            }
            patientAttributeTypes.push(attributeType);
        });
        return {
            personAttributeTypes : patientAttributeTypes
        };
    };

    return PatientAttributeTypeMapper;
})();

'use strict';

var Bahmni = Bahmni || {};
Bahmni.Registration = Bahmni.Registration || {};
Bahmni.Registration.Emergency = Bahmni.Registration.Emergency || {};

angular.module('bahmni.registration.emergency', ['ngRoute', 'bahmni.registration']);
'use strict';


angular
    .module('emergency', ['authentication', 'bahmni.common.appFramework', 'httpErrorInterceptor', 'bahmni.registration.emergency'])
    .config(['$routeProvider', '$httpProvider', function ($routeProvider, $httpProvider) {
        $routeProvider.when('/create', {templateUrl: 'views/create.html', controller: 'CreateEmergencyPatientController', resolve: {initialization: 'initialization'}});
        $routeProvider.when('/summary', {templateUrl: 'views/summary.html', controller: 'EmergencyRegistrationSummaryController'});
        $routeProvider.otherwise({redirectTo: '/create'});
    }]).run(function ($rootScope, $templateCache) {
        //Disable caching view template partials
        $rootScope.$on('$viewContentLoaded', function () {
                $templateCache.removeAll();
            }
        )
    });
'use strict';

angular.module('bahmni.registration.emergency')
    .controller('CreateEmergencyPatientController', [ '$rootScope', '$scope', '$location', 'patient', 'patientService', 'encounterService', 'Preferences', 'spinner',
    function ($rootScope, $scope, $location, patientModel, patientService, encounterService, preferences, spinner) {

        var init = function(){
            $scope.patient = patientModel.create();
            $scope.identifierSources = $rootScope.patientConfiguration.identifierSources;
            var identifierPrefix = $scope.identifierSources.filter(function (identifierSource) {
                return identifierSource.prefix === preferences.identifierPrefix;
            });

            $scope.patient.identifierPrefix = identifierPrefix[0] || $scope.identifierSources[0];

            var visitTypeUuid = $scope.encounterConfiguration.visitTypes[constants.visitType.emergency];
            var encounterTypeUuid = $scope.encounterConfiguration.encounterTypes[constants.encounterType.registration];
            $scope.encounter = {visitTypeUuid: visitTypeUuid, encounterTypeUuid: encounterTypeUuid, observations: []};
            $scope.addressLevels = [{name: "Village", addressField: "cityVillage", required: false}];
        };
        init();

        var createPatient = function() {
            return patientService.generateIdentifier($scope.patient)
                .then(function (data) {
                    var patient = $scope.patient;
                    patient.identifier = data.data;
                    patient.familyName = patient.familyName || "Unknown";
                    patient.givenName = patient.givenName || "Unknown";
                    patient.address.cityVillage = patient.address.cityVillage || "Unknown";
                    return patientService.create(patient);
                }).then(successCallback);
        };

        var setPreferences = function() {
            preferences.identifierPrefix = $scope.patient.identifierPrefix.prefix;
        };

        var successCallback = function(response) {
            var patient = response.data.patient;
            $scope.patient.uuid = patient.uuid;
            $scope.patient.identifier = patient.identifiers[0].identifier;
            $scope.patient.name = patient.person.names[0].display;
            setPreferences();
            patientService.rememberPatient($scope.patient);
        };

        var createVisit = function() {
            $scope.encounter.patientUuid = $scope.patient.uuid;
            return encounterService.create($scope.encounter).success(function(data) {
                $location.path("/summary");
            });
        };

        $scope.create = function(){
            spinner.forPromise(createPatient().then(createVisit));
        };
    }]);

'use strict';

angular.module('bahmni.registration.emergency')
    .controller('EmergencyRegistrationSummaryController', ['$scope', '$location', 'patientService',
    function ($scope, $location, patientService) {
        var init = function(){
            $scope.patient = patientService.getPatient();
        };
        init();

        $scope.back = function() {
            $location.path("/create");
        }
    }]);
